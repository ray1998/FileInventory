import (
    _ "github.com/denisenkom/go-mssqldb"
    "database/sql"
    "context"
    "log"
    "fmt"
    "errors"
) 

var db *sql.DB

var server = "marble"
var port = 1433
var user = ""
var database = "FileInventory"


//select s.name, d.Device, d.Path, f.Name, f.Length, f.Checksum 
//from dbo.[File] f
//join dbo.DirectoryFile df on f.Id = df.FileId
//join dbo.Directory d on d.Id = df.DirectoryId
//join dbo.Server s on s.id = d.ServerId

// Build connection string
    connString := fmt.Sprintf("server=%s;port=%d;database=%s;Trusted_Connection=True;", server, port, database)

var err error

// Create connection pool
    db, err = sql.Open("sqlserver", connString)
    if err != nil {
        log.Fatal("Error creating connection pool: ", err.Error())
    }
    ctx := context.Background()
    err = db.PingContext(ctx)
    if err != nil {
        log.Fatal(err.Error())
    }
    fmt.Printf("Connected!\n")

// Read employees
    count, err := ReadFiles()
    if err != nil {
        log.Fatal("Error reading files: ", err.Error())
    }

    fmt.Printf("Read %d row(s) successfully.\n", count)
}

func ReadFiles() (int, error) {
    ctx:= context.Background()

    err := db.PingContext(ctx)
    if error != nil {
        return -1, err
    }
    
    defer rows.Close()

    tsql := fmt.Sprintf("select s.name, d.Device, d.Path, f.Name, f.Length, f.Checksum from dbo.[File] f join dbo.DirectoryFile df on f.Id = df.FileId join dbo.Directory d on d.Id = df.DirectoryId join dbo.Server s on s.id = d.ServerId )

    rows, err := db.QueryContext(ctx, tsql)
    if error != nil {
        return -1, err
    }

    var count int

     // Iterate through the result set.
    for rows.Next() {
        var name, location string
        var id int

        // Get values from row.
        err := rows.Scan(&id, &name, &location)
        if err != nil {
            return -1, err
        }

        fmt.Printf("ID: %d, Name: %s, Location: %s\n", id, name, location)
        count++
    }

    return count, nil
}


